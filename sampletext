<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Ask Clara – A GenAI Assistant</title>
  <style>
    :root {
      --primary: #6d28d9;
      --primary-light: #a58cfc;
      --primary-dark: #521bd6;
      --bg-light: #f0f3f8;
      --bg-dark: #111827;
      --text-light: #1f2937;
      --text-dark: #f1f1f1;
      --user-bubble: #007aff;
      --bot-bubble: #e0e0e0;
      --border-light: #ccc;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: var(--bg-light);
      color: var(--text-light);
      margin: 0;
      padding: 0;
      transition: background 0.3s, color 0.3s;
    }

    body.dark {
      background: var(--bg-dark);
      color: var(--text-dark);
    }

    .chat-container {
      max-width: 1000px;
      margin: 2rem auto;
      border-radius: 16px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
      background: white;
      overflow: hidden;
    }

    body.dark .chat-container {
      background: #1e1e2f;
    }

    .chat-header {
      padding: 1rem;
      background: linear-gradient(to right, var(--primary), var(--primary-dark));
      color: white;
    }

    .chat-header h1 {
      margin: 0;
      font-size: 1.25rem;
    }

    .chat-header p {
      margin: 0.25rem 0 0;
      font-size: 0.875rem;
      opacity: 0.9;
    }

    .chat-history {
      padding: 1rem;
      max-height: 600px;
      overflow-y: auto;
    }

    .message {
      display: flex;
      margin-bottom: 1rem;
    }

    .message.bot {
      flex-direction: row;
    }

    .message.user {
      flex-direction: row-reverse;
    }

    .avatar {
      width: 2.5rem;
      height: 2.5rem;
      border-radius: 50%;
      background: var(--primary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      margin: 0 0.5rem;
    }

    .message-bubble {
      background: #f1f1f1;
      padding: 0.75rem 1rem;
      border-radius: 1rem;
      max-width: 80%;
      line-height: 1.5;
      white-space: pre-wrap;
    }

    body.dark .message-bubble {
      background: #333a4a;
      color: white;
    }

    .input-area {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 1rem;
      border-top: 1px solid var(--border-light);
    }

    .input-area input {
      flex-grow: 1;
      padding: 0.5rem;
      border-radius: 8px;
      border: 1px solid #ccc;
    }

    .input-area button {
      background: var(--primary);
      color: white;
      border: none;
      border-radius: 8px;
      padding: 0.5rem 1rem;
      cursor: pointer;
    }

    .controls {
      display: flex;
      justify-content: space-between;
      padding: 0 1rem 1rem;
      font-size: 0.9rem;
    }

    .controls label {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .controls button {
      padding: 0.4rem 0.75rem;
      border: none;
      border-radius: 6px;
      background: #444;
      color: white;
      cursor: pointer;
    }

    .controls button:hover {
      background: #333;
    }

    .typing-indicator {
      font-family: monospace;
      font-size: 1.2rem;
      animation: blink 1s infinite steps(1, start);
    }

    @keyframes blink {
      0% { opacity: 1; }
      50% { opacity: 0.3; }
      100% { opacity: 1; }
    }
  </style>
</head>
<body class="light">
  <div class="chat-container">
    <div class="chat-header">
      <h1>Ask Clara – A GenAI Assistant for Smarter Operations</h1>
      <p>Clara knows your playbooks, so you don’t have to.</p>
    </div>

    <div class="chat-history" id="chatHistory">
      <!-- Messages will go here -->
    </div>

    <div class="input-area">
      <input type="text" id="query" placeholder="Ask Clara..." />
      <button onclick="askClara()">Send</button>
    </div>

    <div class="controls">
      <div>
        <button onclick="resetChat()">Reset Chat</button>
        <button onclick="downloadChat()">Download Chat</button>
      </div>
      <label>
        <input type="checkbox" id="themeToggle" />
        Dark Mode
      </label>
    </div>
  </div>

  <script>
    const chatHistory = document.getElementById("chatHistory");
    const queryInput = document.getElementById("query");
    const themeToggle = document.getElementById("themeToggle");

    function addMessage(text, sender) {
      const message = document.createElement("div");
      message.className = "message " + sender;

      const avatar = document.createElement("div");
      avatar.className = "avatar";
      avatar.textContent = sender === "user" ? "U" : "C";

      const bubble = document.createElement("div");
      bubble.className = "message-bubble";
      bubble.textContent = typeof text === "object" ? JSON.stringify(text) : text;

      message.appendChild(avatar);
      message.appendChild(bubble);
      chatHistory.appendChild(message);
      chatHistory.scrollTop = chatHistory.scrollHeight;
    }

    async function askClara() {
      const query = queryInput.value.trim();
      if (!query) return;

      addMessage(query, "user");
      queryInput.value = "";

      // Add loading animation
      const loading = document.createElement("div");
      loading.className = "message bot";
      loading.innerHTML = `<div class="avatar">C</div><div class="message-bubble"><span class="typing-indicator">Clara is typing...</span></div>`;
      chatHistory.appendChild(loading);
      chatHistory.scrollTop = chatHistory.scrollHeight;

      try {
        const res = await fetch("https://<your-api-url>.amazonaws.com/prod/chatbot", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ query }),
        });

        const raw = await res.text();
        let data;
        try {
          data = JSON.parse(raw);
        } catch (e) {
          data = raw;
        }

        chatHistory.lastChild.remove(); // remove loading
        let answer = "";

        if (typeof data === "string") {
          answer = data;
        } else if (Array.isArray(data.answer)) {
          answer = data.answer.map(item => item.text || "").join("\n").trim();
        } else if (typeof data.answer === "string") {
          answer = data.answer;
        } else if (data.message) {
          answer = data.message;
        } else if (data.response) {
          answer = data.response;
        } else {
          answer = JSON.stringify(data);
        }

        addMessage(answer || "Sorry, I couldn't find an answer.", "bot");
      } catch (err) {
        chatHistory.lastChild.remove();
        addMessage("⚠️ Error: " + err.message, "bot");
      }
    }

    function resetChat() {
      chatHistory.innerHTML = "";
    }

    function downloadChat() {
      const text = Array.from(chatHistory.querySelectorAll(".message")).map(m => {
        const who = m.classList.contains("user") ? "You" : "Clara";
        const msg = m.querySelector(".message-bubble").textContent;
        return `${who}: ${msg}`;
      }).join("\n");

      const blob = new Blob([text], { type: "text/plain" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = "clara_chat.txt";
      link.click();
    }

    themeToggle.addEventListener("change", function () {
      document.body.className = this.checked ? "dark" : "light";
    });

    queryInput.addEventListener("keypress", function (e) {
      if (e.key === "Enter") askClara();
    });

    // Initial welcome message
    addMessage("Hello! I'm Clara, your operations assistant. How can I help you today?", "bot");
  </script>
</body>
</html>