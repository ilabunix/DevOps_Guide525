//@version=5
strategy("EMAX Crossover Strategy Pro v1.0", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// === Inputs ===
mode = input.string("SCALP", title="Mode", options=["SCALP", "SWING"])
useFixed = input.bool(false, title="Use Fixed TP/SL?")
fixedTP = input.float(12.0, title="Fixed TP (ticks/points)")
fixedSL = input.float(8.0, title="Fixed SL (ticks/points)")
tpMult = input.float(1.5, title="ATR Take Profit Multiplier")
slMult = input.float(1.0, title="ATR Stop Loss Multiplier")
scoreThreshold = input.int(70, title="Minimum Signal Score to Enter Trade")
volMultiplier = input.float(1.5, title="Volume Spike Threshold (x avgVol)")
useRSI = input.bool(true, title="Use RSI Filter for SWING")
useVWAP = input.bool(true, title="Use VWAP Filter for SCALP")

// === Core Indicators ===
fastLen = mode == "SCALP" ? 9 : 10
slowLen = mode == "SCALP" ? 21 : 55
fastEMA = ta.ema(close, fastLen)
slowEMA = ta.ema(close, slowLen)
vwap = ta.vwap
atr = ta.atr(14)
rsi = ta.rsi(close, 14)
macdLine = ta.ema(close, 12) - ta.ema(close, 26)
avgVol = ta.sma(volume, 20)

// === Signal Score ===
trendOK = fastEMA > slowEMA
structureOK = mode == "SCALP" ? close > vwap : close > slowEMA
momentumOK = rsi > 50 and macdLine > 0
volumeSpike = volume > avgVol * volMultiplier

score = 0
score += trendOK ? 30 : 0
score += structureOK ? 20 : 0
score += momentumOK ? 30 : 0
score += volumeSpike ? 20 : 0

// === Retest Entry Logic ===
var float lastCrossPrice = na
var bool canEnter = false

if ta.crossover(fastEMA, slowEMA)
    lastCrossPrice := close
    canEnter := false
if not canEnter and close < fastEMA and not na(lastCrossPrice)
    canEnter := true

longCondition = trendOK and canEnter and score >= scoreThreshold and (mode == "SCALP" ? (not useVWAP or close > vwap) : (not useRSI or rsi > 40))
shortCondition = fastEMA < slowEMA and close > fastEMA and score >= scoreThreshold and (mode == "SCALP" ? (not useVWAP or close < vwap) : (not useRSI or rsi < 60))

// === Entry Price Track
var float entryPrice = na
if (longCondition or shortCondition)
    entryPrice := close

// === TP/SL Logic
longTP1 = entryPrice + (useFixed ? fixedTP : atr * 1.5)
longTP2 = entryPrice + (useFixed ? fixedTP * 2.0 : atr * 2.5)
longSL  = entryPrice - (useFixed ? fixedSL : atr * slMult)

shortTP1 = entryPrice - (useFixed ? fixedTP : atr * 1.5)
shortTP2 = entryPrice - (useFixed ? fixedTP * 2.0 : atr * 2.5)
shortSL  = entryPrice + (useFixed ? fixedSL : atr * slMult)

longTrailExit = close < fastEMA
shortTrailExit = close > fastEMA

// === Strategy Orders
if (longCondition)
    strategy.entry("Long", strategy.long)
if (shortCondition)
    strategy.entry("Short", strategy.short)

strategy.exit("TP1 Long", from_entry="Long", limit=longTP1, stop=longSL, qty_percent=50)
strategy.exit("TP2 Long", from_entry="Long", limit=longTP2, stop=longSL, qty_percent=25)
strategy.exit("Trail Long", from_entry="Long", when=longTrailExit, qty_percent=25)

strategy.exit("TP1 Short", from_entry="Short", limit=shortTP1, stop=shortSL, qty_percent=50)
strategy.exit("TP2 Short", from_entry="Short", limit=shortTP2, stop=shortSL, qty_percent=25)
strategy.exit("Trail Short", from_entry="Short", when=shortTrailExit, qty_percent=25)

// === Plot EMAs & VWAP
plot(fastEMA, title="Fast EMA", color=color.orange)
plot(slowEMA, title="Slow EMA", color=color.blue)
plot(useVWAP ? vwap : na, title="VWAP", color=color.purple)

// === Bar Coloring
barcolor(score >= scoreThreshold and fastEMA > slowEMA ? color.lime :
         score >= scoreThreshold and fastEMA < slowEMA ? color.red :
         color.gray)

// === Signal Dashboard Label
var label infoLabel = na
if (na(infoLabel))
    infoLabel := label.new(bar_index, high, "", xloc=xloc.bar_index, style=label.style_label_left)

entryStatus = longCondition ? "BUY" : shortCondition ? "SELL" : "WAIT"
label.set_text(infoLabel, "ðŸ“Š EMAX DASHBOARD\n" +
    "Mode: " + mode + "\n" +
    "Score: " + str.tostring(score, "#") + "\n" +
    "Entry: " + entryStatus + "\n" +
    (useFixed 
        ? "Fixed TP1/2: " + str.tostring(fixedTP) + "/" + str.tostring(fixedTP*2.0) + "\nFixed SL: " + str.tostring(fixedSL)
        : "TP1/2: " + str.tostring(atr*1.5, "#.##") + "/" + str.tostring(atr*2.5, "#.##") + "\nSL: " + str.tostring(atr*slMult, "#.##")))
label.set_xy(infoLabel, bar_index + 1, high + atr)
label.set_size(infoLabel, size.normal)
label.set_style(infoLabel, label.style_label_left)
label.set_color(infoLabel, color.black)
label.set_textcolor(infoLabel, color.white)

// === Alerts (Webhook Simulation)
alertcondition(longCondition, title="Long Alert", message="ðŸŸ¢ Long Entry Signal ({{ticker}}) at {{close}}")
alertcondition(shortCondition, title="Short Alert", message="ðŸ”´ Short Entry Signal ({{ticker}}) at {{close}}")

// === Dynamic Structure Zones
hh = ta.highest(high, 20)
ll = ta.lowest(low, 20)
plot(hh, title="Structure High", color=color.new(color.fuchsia, 50), style=plot.style_line)
plot(ll, title="Structure Low", color=color.new(color.aqua, 50), style=plot.style_line)

// === On-Chart Performance Metrics
wins = strategy.wintrades
losses = strategy.losstrades
trades = wins + losses
avgRR = trades > 0 ? strategy.grossprofit / strategy.grossloss : na
profitFactor = strategy.grossprofit / abs(strategy.grossloss)
label.new(bar_index, low, text="ðŸ“ˆ Trades: " + str.tostring(trades) + "\nWin Rate: " + str.tostring((wins/trades)*100, "#.##") + "%\nProfit Factor: " + str.tostring(profitFactor, "#.##"), yloc=yloc.belowbar, style=label.style_label_up, textcolor=color.white, size=size.small, color=color.new(color.black, 70))