📦 Current Production Deployment Process – Overview & Gaps

✅ Existing Approval Workflow

Application Development Teams (ADTs) currently follow a multi-step gated process before promoting changes to production. This includes:
	•	Peer Code Reviews – ensuring code quality and internal validation
	•	Security Champion Approval – confirming adherence to security best practices
	•	GitLab Merge Gatekeeping –
	•	❗Merge blocked unless:
	•	1 Security Approver ✅
	•	1 Project Team Approver ✅
	•	CI/CD pipeline passes ✅
	•	CI/CD Pipeline Gating –
	•	Manual approval job before applying infrastructure
	•	tf_apply job runs only after approval is received
	•	Release Coordination – may include ORC/CAB sign-off if applicable
	•	Monitoring & Alerting – dashboards typically in place (varies by app)

This tightly controlled flow ensures that unauthorized or misconfigured changes are blocked from production.
![Insert GitLab screenshots of approvals and pipeline stages]

⸻

⚠️ TechOps Visibility – Current Challenges

Despite these robust safeguards, TechOps often lacks real-time awareness of what’s being deployed. Currently, they are expected to:
	•	Manually review CI/CD pipelines, Terraform plans, or MRs to understand changes
	•	React to production issues without full deployment context
	•	Rely on informal Slack messages or tribal knowledge during on-call

➡️ This reactive approach is not scalable, creates blind spots, and often leads to delayed incident resolution.

⸻

💡 Suggestions to Improve Coordination & Transparency

To close the gap between deployment control and operational awareness, here are recommended actions for ADTs and platform stakeholders:

⸻

1. 📋 Deployment Summary Template (Pre-deploy Notification)

ADTs should provide a brief release summary before any production deployment, ideally posted in a shared Slack channel or email group.

📌 Template Example:

🚀 [App Name] Prod Deployment Summary
📅 Date: Aug 27 @ 2:00–2:30 PM CT
🧾 Scope:
	•	Deploying /v2/orders Lambda
	•	ALB target group timeout update
🔍 Impact: No downtime expected
🛠️ Monitoring: CloudWatch alarms active
🔄 Rollback Plan: Revert to previous commit
🔗 MR: [link]
📊 Dashboard: [link]

This gives TechOps and other stakeholders clarity on what is changing, why it matters, and how to monitor.

⸻

2. 📅 Team-Wide Calendar Invite for Prod Deployments

A standardized 30-minute calendar invite should be sent to:
	•	TechOps on-call
	•	Core ADT members
	•	Release approvers (optional)

This ensures team-wide awareness of the release window and avoids dependence on a single SME to relay information.
The release summary can be included in the invite description.

⸻

3. ✅ Mandatory ORC Checklist (For Critical Apps)

Incorporate a lightweight checklist as part of the CI/CD flow to ensure:
	•	Logging and alerting is configured
	•	Contingency/rollback steps are ready
	•	TechOps was notified and looped in (even async)

This strengthens the operational posture and ensures readiness during go-live.

⸻

4. 🏷️ Git Tagging & MR Labels for Visibility

Standardize tagging to improve filtering and awareness:
	•	#prod-deploy
	•	#infra-change
	•	#no-impact / #visible-impact

This helps flag high-risk changes for TechOps without manual digging.

⸻

5. 📬 Post-Deployment Confirmation (Optional)

After successful deployment, ADTs should confirm:
	•	✅ Deployment outcome (Success/Partial/Failed)
	•	📊 Any dashboards or alerts modified
	•	🔁 Any follow-up actions required (toggle on, further rollout)

⸻

📣 Conclusion

The approval flow and CI/CD gating already provide strong governance, but without clear, shared communication, TechOps is left in the dark.

To move from reactive support to proactive readiness, we recommend:
	•	📋 Sharing release summaries
	•	📅 Scheduling calendar invites for deployment windows
	•	🧠 Eliminating single-resource dependency for communication
	•	✅ Empowering TechOps with the context they need to support production environments effectively