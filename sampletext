<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Ask Clara – A GenAI Assistant for Smarter Operations</title>
  <style>
    :root {
      --primary: #6d28d9;
      --primary-light: #a855f7;
      --primary-dark: #5b21b6;
      --bubble-bot: #f4f4f5;
      --bubble-user: #c7d2fe;
      --bg-light: #ffffff;
      --bg-dark: #1f2937;
      --text-light: #f9fafb;
      --text-dark: #111827;
    }

    [data-theme='dark'] {
      --bg: var(--bg-dark);
      --text: var(--text-light);
      --card: #374151;
    }

    [data-theme='light'] {
      --bg: var(--bg-light);
      --text: var(--text-dark);
      --card: #ffffff;
    }

    body {
      margin: 0;
      font-family: 'Inter', system-ui, sans-serif;
      background-color: var(--bg);
      color: var(--text);
      display: flex;
      justify-content: center;
      padding: 2rem;
    }

    .chat-container {
      width: 100%;
      max-width: 800px;
      background-color: var(--card);
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    .chat-header {
      background: linear-gradient(to right, var(--primary), var(--primary-light));
      color: white;
      padding: 1rem 1.25rem;
      font-size: 1rem;
    }

    .chat-header .title {
      font-weight: 700;
      font-size: 1.1rem;
    }

    .chat-header .subtitle {
      font-size: 0.9rem;
      margin-top: 2px;
      opacity: 0.9;
    }

    .messages {
      flex-grow: 1;
      padding: 1rem;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .message {
      display: flex;
      max-width: 100%;
      align-items: flex-start;
    }

    .message.bot {
      flex-direction: row;
    }

    .message.user {
      flex-direction: row-reverse;
    }

    .avatar {
      width: 32px;
      height: 32px;
      background-color: var(--primary);
      color: white;
      font-weight: bold;
      font-size: 0.875rem;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 0.5rem;
    }

    .bubble {
      padding: 0.75rem 1rem;
      border-radius: 12px;
      line-height: 1.5;
      font-size: 0.9375rem;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
      max-width: 75%;
      word-wrap: break-word;
    }

    .message.bot .bubble {
      background-color: var(--bubble-bot);
    }

    .message.user .bubble {
      background-color: var(--bubble-user);
    }

    .input-area {
      display: flex;
      gap: 0.5rem;
      padding: 1rem;
      border-top: 1px solid #e5e7eb;
      background-color: var(--card);
      flex-wrap: wrap;
      align-items: center;
    }

    .input-area input {
      flex: 1;
      padding: 0.75rem;
      border-radius: 8px;
      border: 1px solid #ccc;
      font-size: 1rem;
    }

    .input-area button {
      background-color: var(--primary);
      color: white;
      padding: 0.6rem 1rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
    }

    .toolbar {
      display: flex;
      justify-content: space-between;
      width: 100%;
      padding: 0 0.25rem;
      margin-top: 0.5rem;
      font-size: 0.875rem;
    }

    .toolbar button, .toolbar label {
      background-color: #111827;
      color: #f9fafb;
      padding: 0.4rem 0.75rem;
      border-radius: 6px;
      border: none;
      cursor: pointer;
      margin-right: 0.5rem;
    }

    .toolbar input[type="checkbox"] {
      margin-left: 0.5rem;
    }

    @media (max-width: 600px) {
      .chat-container {
        border-radius: 0;
      }

      .bubble {
        max-width: 90%;
      }
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="chat-header">
      <div class="title">Ask Clara – A GenAI Assistant for Smarter Operations</div>
      <div class="subtitle">Clara knows your playbooks, so you don’t have to.</div>
    </div>
    <div class="messages" id="chatLog">
      <div class="message bot">
        <div class="avatar">C</div>
        <div class="bubble">Hello! I'm Clara, your operations assistant. How can I help you today?</div>
      </div>
    </div>
    <div class="input-area">
      <input type="text" id="userInput" placeholder="Ask Clara…" />
      <button onclick="sendMessage()">Send</button>
      <div class="toolbar">
        <button onclick="resetChat()">Reset Chat</button>
        <button onclick="downloadChat()">Download Chat</button>
        <label>
          <input type="checkbox" onchange="toggleDarkMode()"> Dark Mode
        </label>
      </div>
    </div>
  </div>

  <script>
    const chatLog = document.getElementById('chatLog');
    const userInput = document.getElementById('userInput');

    function toggleDarkMode() {
      const theme = document.documentElement.getAttribute('data-theme');
      document.documentElement.setAttribute('data-theme', theme === 'dark' ? 'light' : 'dark');
    }

    function resetChat() {
      chatLog.innerHTML = `
        <div class="message bot">
          <div class="avatar">C</div>
          <div class="bubble">Hello! I'm Clara, your operations assistant. How can I help you today?</div>
        </div>`;
    }

    function downloadChat() {
      let text = '';
      document.querySelectorAll('.message').forEach(msg => {
        const who = msg.classList.contains('user') ? 'You' : 'Clara';
        const content = msg.querySelector('.bubble').innerText;
        text += `${who}: ${content}\n\n`;
      });

      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'clara_chat.txt';
      a.click();
      URL.revokeObjectURL(url);
    }

    async function sendMessage() {
      const message = userInput.value.trim();
      if (!message) return;

      // Add user message
      const userMsg = document.createElement('div');
      userMsg.className = 'message user';
      userMsg.innerHTML = `<div class="avatar">Y</div><div class="bubble">${message}</div>`;
      chatLog.appendChild(userMsg);
      chatLog.scrollTop = chatLog.scrollHeight;
      userInput.value = '';

      // Show thinking bubble
      const thinking = document.createElement('div');
      thinking.className = 'message bot';
      thinking.innerHTML = `<div class="avatar">C</div><div class="bubble">Clara is thinking...</div>`;
      chatLog.appendChild(thinking);
      chatLog.scrollTop = chatLog.scrollHeight;

      try {
        const res = await fetch('YOUR_API_GATEWAY_ENDPOINT', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ query: message })
        });

        const data = await res.json();
        let answer = '';

        if (Array.isArray(data)) {
          answer = data.map(item => item.text || item.content || JSON.stringify(item)).join('\n');
        } else if (data?.text) {
          answer = data.text;
        } else {
          answer = JSON.stringify(data);
        }

        thinking.remove();
        const botMsg = document.createElement('div');
        botMsg.className = 'message bot';
        botMsg.innerHTML = `<div class="avatar">C</div><div class="bubble">${answer}</div>`;
        chatLog.appendChild(botMsg);
        chatLog.scrollTop = chatLog.scrollHeight;
      } catch (error) {
        thinking.remove();
        const errMsg = document.createElement('div');
        errMsg.className = 'message bot';
        errMsg.innerHTML = `<div class="avatar">C</div><div class="bubble">Sorry, an error occurred.</div>`;
        chatLog.appendChild(errMsg);
      }
    }
  </script>
</body>
</html>