// EMAX Genesis Pro: Clean Dashboard, No Open PnL

using System;
using System.Windows.Media;
using NinjaTrader.Cbi;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Gui.Chart;
using NinjaTrader.NinjaScript;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript.Strategies;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;

namespace NinjaTrader.NinjaScript.Strategies
{
    public class EMAX_Genesis_Pro : Strategy
    {
        // --- Product-Style Properties ---
        [NinjaScriptProperty]
        public bool TradeGuardStandard { get; set; }
        [NinjaScriptProperty]
        public bool TradeGuardDynamic { get; set; }
        [NinjaScriptProperty]
        public bool TargetLock { get; set; }
        [NinjaScriptProperty]
        public bool SafetyNet { get; set; }
        [NinjaScriptProperty]
        public bool EnableSessionFilter { get; set; }
        [NinjaScriptProperty]
        public TimeSpan SessionStartTime { get; set; }
        [NinjaScriptProperty]
        public TimeSpan SessionEndTime { get; set; }
        [NinjaScriptProperty]
        public bool DailyGoalLock { get; set; }
        [NinjaScriptProperty]
        public double DailyProfitGoal { get; set; }
        [NinjaScriptProperty]
        public bool DailyRiskGuard { get; set; }
        [NinjaScriptProperty]
        public double DailyMaxLoss { get; set; }
        [NinjaScriptProperty]
        public bool ManualCloseAutoContinue { get; set; }
        [NinjaScriptProperty]
        public int TakeProfitTicks { get; set; }
        [NinjaScriptProperty]
        public int StopLossTicks { get; set; }

        // --- Internal ---
        private EMA ema10, ema21, ema55;
        private string lastSignal = "None";
        private double sessionPnL = 0;
        private double priorRealized = 0;
        private DateTime currentSession = Core.Globals.MinDate;
        private bool hitDailyProfit = false;
        private bool hitDailyStop = false;
        private bool manualFlatDetected = false;
        private bool strategyInitiatedExit = false;
        private MarketPosition lastMarketPosition = MarketPosition.Flat;
        private bool tpArmed = false;
        private bool slArmed = false;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name = "EMAX_Genesis_Pro";
                Calculate = Calculate.OnBarClose;
                IsOverlay = true;
                TradeGuardStandard = true;
                TradeGuardDynamic = false;
                TargetLock = false;
                SafetyNet = false;
                EnableSessionFilter = false;
                SessionStartTime = new TimeSpan(9, 30, 0); // 9:30 AM
                SessionEndTime = new TimeSpan(16, 0, 0);   // 4:00 PM
                DailyGoalLock = false;
                DailyProfitGoal = 500.0;
                DailyRiskGuard = false;
                DailyMaxLoss = 500.0;
                ManualCloseAutoContinue = false;
                TakeProfitTicks = 40;
                StopLossTicks = 20;
            }
            else if (State == State.DataLoaded)
            {
                ema10 = EMA(10);
                ema21 = EMA(21);
                ema55 = EMA(55);
                sessionPnL = 0;
                priorRealized = 0;
                currentSession = Core.Globals.MinDate;
                hitDailyProfit = false;
                hitDailyStop = false;
                manualFlatDetected = false;
                strategyInitiatedExit = false;
                lastMarketPosition = MarketPosition.Flat;
                tpArmed = false;
                slArmed = false;
            }
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < 55) return;

            // --- Session Filter ---
            if (EnableSessionFilter)
            {
                TimeSpan now = Time[0].TimeOfDay;
                if (now < SessionStartTime || now > SessionEndTime)
                    return; // Not in session
            }

            // --- New Session Reset ---
            DateTime barTime = Time[0];
            if (currentSession.Date != barTime.Date)
            {
                sessionPnL = 0;
                priorRealized = SystemPerformance.AllTrades.TradesPerformance.Currency.CumProfit;
                hitDailyProfit = false;
                hitDailyStop = false;
                manualFlatDetected = false;
                strategyInitiatedExit = false;
                lastMarketPosition = MarketPosition.Flat;
                lastSignal = "None";
                tpArmed = false;
                slArmed = false;
            }

            // --- Update Session PnL ---
            sessionPnL = SystemPerformance.AllTrades.TradesPerformance.Currency.CumProfit - priorRealized;

            // --- Daily Stop/Profit Enforcement ---
            if (DailyGoalLock && !hitDailyProfit && sessionPnL >= DailyProfitGoal)
            {
                hitDailyProfit = true;
                Print("Daily goal hit: Trading paused for today.");
            }
            if (DailyRiskGuard && !hitDailyStop && sessionPnL <= -Math.Abs(DailyMaxLoss))
            {
                hitDailyStop = true;
                Print("Daily max loss hit: Trading paused for today.");
            }
            if ((hitDailyProfit || hitDailyStop) && Position.MarketPosition == MarketPosition.Flat)
                return; // Don't enter new trades

            // --- Manual Flat Detection (fixed) ---
            if (lastMarketPosition != MarketPosition.Flat && Position.MarketPosition == MarketPosition.Flat)
            {
                if (!strategyInitiatedExit)
                {
                    manualFlatDetected = true;
                    if (!ManualCloseAutoContinue)
                    {
                        Print("Manual flat detected: Strategy will now stop trading logic until next day.");
                        lastMarketPosition = Position.MarketPosition; // update
                        return;
                    }
                }
                strategyInitiatedExit = false;
            }
            if (Position.MarketPosition != MarketPosition.Flat)
                manualFlatDetected = false; // Reset as soon as a new position is open

            lastMarketPosition = Position.MarketPosition;

            // --- TP/SL Logic ---
            if (Position.MarketPosition == MarketPosition.Flat)
            {
                // Disarm TP/SL (only when flat)
                tpArmed = false;
                slArmed = false;
                SetProfitTarget(CalculationMode.Ticks, double.NaN);
                SetStopLoss(CalculationMode.Ticks, double.NaN);
            }
            else
            {
                // Arm TP/SL ONCE after entry
                if (!tpArmed && TargetLock)
                {
                    SetProfitTarget(CalculationMode.Ticks, TakeProfitTicks);
                    tpArmed = true;
                }
                if (!slArmed && SafetyNet)
                {
                    SetStopLoss(CalculationMode.Ticks, StopLossTicks);
                    slArmed = true;
                }
            }

            // --- Entry Logic (Black Box) ---
            if (!hitDailyProfit && !hitDailyStop && !manualFlatDetected)
            {
                if (CrossAbove(ema10, ema55, 1))
                {
                    EnterLong("Long");
                    lastSignal = "Long";
                    PlaySound(NinjaTrader.Core.Globals.InstallDir + @"\sounds\Alert3.wav");
                }
                if (CrossBelow(ema10, ema55, 1))
                {
                    EnterShort("Short");
                    lastSignal = "Short";
                    PlaySound(NinjaTrader.Core.Globals.InstallDir + @"\sounds\Alert3.wav");
                }
            }

            // --- Exit Logic (Standard/Dynamic) ---
            if (Position.MarketPosition == MarketPosition.Long)
            {
                if (TradeGuardStandard && CrossBelow(ema10, ema55, 1))
                {
                    strategyInitiatedExit = true;
                    ExitLong("StdExit");
                    lastSignal = "Exit Long - Std";
                }
                if (TradeGuardDynamic && CrossBelow(ema10, ema21, 1))
                {
                    strategyInitiatedExit = true;
                    ExitLong("DynExit");
                    lastSignal = "Exit Long - Dynamic";
                }
            }
            if (Position.MarketPosition == MarketPosition.Short)
            {
                if (TradeGuardStandard && CrossAbove(ema10, ema55, 1))
                {
                    strategyInitiatedExit = true;
                    ExitShort("StdExit");
                    lastSignal = "Exit Short - Std";
                }
                if (TradeGuardDynamic && CrossAbove(ema10, ema21, 1))
                {
                    strategyInitiatedExit = true;
                    ExitShort("DynExit");
                    lastSignal = "Exit Short - Dynamic";
                }
            }
        }

        protected override void OnRender(ChartControl chartControl, ChartScale chartScale)
        {
            base.OnRender(chartControl, chartScale);

            string dashText =
                "EMAX Genesis Pro\n" +
                "Trade Guard: " + (TradeGuardDynamic ? "Dynamic" : "Standard") + "\n" +
                "Session: " + (EnableSessionFilter ? $"{SessionStartTime:hh\\:mm}-{SessionEndTime:hh\\:mm}" : "All") + "\n" +
                "Daily PnL: " + sessionPnL.ToString("C0") +
                (DailyGoalLock ? $" | Goal: {DailyProfitGoal:C0}" : "") +
                (DailyRiskGuard ? $" | Max Loss: -{DailyMaxLoss:C0}" : "") + "\n" +
                "Status: " +
                (hitDailyProfit ? "Goal Hit" : hitDailyStop ? "Max Loss Hit" : manualFlatDetected ? "Manual Close" : "Active") + "\n" +
                "Position: " +
                (Position.MarketPosition == MarketPosition.Long ? "Long" :
                 Position.MarketPosition == MarketPosition.Short ? "Short" : "Flat") + "\n" +
                "Avg Price: " +
                (Position.MarketPosition != MarketPosition.Flat ? Position.AveragePrice.ToString("F2") : "—") + "\n" +
                "Last Signal: " + lastSignal;

            Draw.TextFixed(this, "EMAX_DASH", dashText, TextPosition.BottomRight);
        }
    }
}