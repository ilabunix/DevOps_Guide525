Purpose

This guide explains how to set up the base Grafana Terraform project for any new application under the IaC subgroup.
It provides the folder structure, prerequisites, environment setup, and deployment steps required to create Grafana dashboards and alerts using reusable modules aligned with the CES base pipeline.

⸻

1. Prerequisites

Before starting, ensure the following prerequisites are met:

Step
Description
1.1
Submit a request to ELMA to generate a Grafana API Token for your application’s Grafana Org.
1.2
Store the API token securely in AWS Secrets Manager. Use a naming convention like:  grafana/token/{appname}-{env}
1.3
If you face IAM issues (e.g., runner role access), create a GitLab CI/CD variable for your token to prevent exposing it in plain text.
1.4
Ensure you have access to the appropriate AWS Account and Terraform Cloud or Runner permissions to execute pipelines.
1.5
Clone the base Grafana IaC repository from the CES GitLab group. This repository already includes the required modules and base structure.

2. Repository Structure Overview

Below is the high-level directory structure of the Grafana base project:

TF-CMCV2-GRAFANA/
│
├── ci/
│   └── certificates/              # (Optional) SSL or certificate material if required
│
├── scripts/
│   └── setenv.sh                 # Environment setup script to source variables before Terraform plan/apply
│
├── iac/
│   ├── environments/
│   │   ├── dev/
│   │   ├── test/
│   │   ├── uat/
│   │   └── prod/                 # Each folder contains environment-specific input.tfvars
│   │
│   └── modules/
│       ├── alerts/               # Core alert rule definitions
│       ├── cloudwatch_logs_alerts/
│       ├── cloudwatch_logs_contactpoints/
│       ├── contactpoints/        # Defines notification channels (email, slack, teams, etc.)
│       ├── dashboards/           # JSON-based Grafana dashboard templates
│       ├── folders/              # Grafana folder structure for organizing alerts & dashboards
│       └── notificationpolicy/   # Routing rules for alert delivery
│
├── main.tf                       # Root Terraform orchestration file (calls modules)
├── variables.tf                  # Root-level variable declarations
├── versions.tf                   # Provider and Terraform version pinning
├── providers.tf                  # Provider definitions (Grafana, AWS)
├── local.tf, output.tf            # Local references and output mappings
│
├── .gitlab-ci.yml                # CI/CD pipeline definition (CES base compliant)
├── .gitlab-ci.variables.yml      # Shared variables for CI pipeline
├── .terraform-docs.yml           # For auto-generating Terraform documentation
├── cmc.gitlab-ci.iac-form-deploy-rules.yml  # CES IaC deployment ruleset
├── protect_env.json              # Optional environment protection configuration
└── README.md                     # High-level project overview

3. Folder & Module Explanation

Folder
Purpose
scripts/
Contains environment setup scripts (e.g., setenv.sh) used to export variables for Terraform.
iac/environments/
Holds environment-specific configuration files (input.tfvars) for DEV, TEST, UAT, and PROD.
iac/modules/
Contains reusable Terraform modules that create Grafana resources such as alert rules, contact points, and dashboards.
ci/
May contain CI templates or dependencies used by the pipeline.
root Terraform files
main.tf, providers.tf, variables.tf, etc., handle orchestration and provider setup.
CES Base Files
.gitlab-ci.yml, .gitlab-ci.variables.yml, and cmc.gitlab-ci.iac-form-deploy-rules.yml enforce consistency with CES framework for Terraform deployments.

4. What This Project Creates

When deployed, this project automates provisioning of the following Grafana components:

Component
Description
Folders
Logical grouping for dashboards and alerts (e.g., Lambda, API Gateway, DynamoDB).
Contact Points
Notification endpoints such as Teams, Slack, or Email channels.
Notification Policies
Routing logic to map alert rules to contact points.
Alert Rules
Grafana alert definitions for AWS services (e.g., Lambda errors, API Gateway 4XX/5XX, ALB latency).
Dashboards
Predefined Grafana JSON dashboards to visualize metrics per AWS service.


5. Deployment Steps

Step 1: Clone the Base Repository

Clone the base Grafana Terraform project under your application’s IaC sub-group/project:

Step 2: Setup Environment Variables

Use the provided script to export environment variables:

This script loads the variables required by Terraform (region, grafana org URL, secrets ARN, etc.).

⸻

Step 3: Update Environment Configuration

Modify the following file for your application and environment:

Example parameters to update:

Step 4: Validate & Plan

Run Terraform initialization and validation:

Step 5: Apply Configuration

Deploy the alerts and dashboards:

Step 6: Validate in Grafana

After successful deployment, log in to Grafana and confirm:
	•	Alert rules are created under the correct folders.
	•	Dashboards are visible in the defined folder.
	•	Contact points and routing policies are active.

⸻

6. CI/CD Pipeline Overview

The project follows the CES Base GitLab CI Framework, which:
	•	Uses shared variables defined in .gitlab-ci.variables.yml
	•	Executes terraform plan and terraform apply jobs via runner
	•	Supports environment selection via branch naming convention (e.g., feature/dev, feature/prod)
	•	Ensures secure token handling (masked variables or AWS Secrets Manager)
	•	Integrates automated terraform-docs generation for module documentation

⸻

7. Troubleshooting & Tips

Issue
Resolution
Token Permission Error
Check if your Grafana API token has admin:write permissions.
Secrets Access Denied
Verify the CI/CD runner role has secretsmanager:GetSecretValue permission.
Pipeline Fails at Apply
Confirm correct variable file path and AWS account/region setup.
Alerts Not Visible in Grafana
Ensure the correct Grafana Org and Folder ID mappings are provided in your variables.



Best Practices
	•	Always validate with terraform plan before merge.
	•	Keep environment-specific configs isolated.
	•	Never commit tokens or credentials to Git.
	•	Use consistent resource prefixes (e.g., adt-lambda*, srap-dynamodb*).
	•	Tag dashboards and folders using the application name and environment.

