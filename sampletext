# Query block (A) - CloudWatch metric
data {
  ref_id = "A"
  relative_time_range {
    from = 300
    to   = 0
  }
  datasource_uid = var.cloudwatch_data_source_uid
  model = jsonencode({
    datasource = "cloudwatch"
    region     = var.aws_region
    namespace  = "AWS/ApiGateway"
    metricName = "4XXError"
    dimensions = {
      ApiName = var.api_gateway_name
      Stage   = var.stage_name
    }
    statistics  = ["Sum"]
    period      = "60"
    refId       = "A"
    type        = "timeseries"
  })
}

# Reduce block (B) - take last value from A
data {
  ref_id = "B"
  relative_time_range {
    from = 0
    to   = 0
  }
  datasource_uid = "__expr__"
  model = jsonencode({
    type       = "reduce"
    reducer    = "last"
    expression = "A"
    datasource = {
      type = "__expr__"
      uid  = "__expr__"
    }
    refId = "B"
  })
}

# Threshold block (C) - evaluator on B
data {
  ref_id = "C"
  relative_time_range {
    from = 0
    to   = 0
  }
  datasource_uid = "__expr__"
  model = jsonencode({
    type       = "threshold"
    expression = "B"
    conditions = [{
      evaluator = {
        type   = "gt"
        params = [var.api_gateway_4xx_threshold]
      }
      operator = { type = "and" }
      reducer  = { type = "last" }
      query    = { params = ["B"] }
    }]
    datasource = {
      type = "__expr__"
      uid  = "__expr__"
    }
    refId = "C"
  })
}

# The rule should now use C as the final condition
rule {
  name      = "API Gateway 4XX Errors - ${var.api_gateway_name}-${var.stage_name}"
  condition = "C"

  no_data_state   = "OK"
  exec_err_state  = "Alerting"
  annotations = {
    summary   = "High 4XX errors on API ${var.api_gateway_name}"
    runbook_url = var.application_runbook_url
    __dashboardUid__ = var.api_gateway_dashboard_uid
    __panelId__      = var.api_gateway_panel_id
  }
  labels = {
    severity = "high"
    email    = var.deploy_env
  }
}