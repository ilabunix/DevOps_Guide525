import os
import requests
import pandas as pd
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()
API_KEY = os.getenv("POLYGON_API_KEY")

def generate_signals():
    ticker = "TSLA"
    date = "2024-07-03"  # Any recent trading day for backtest

    # Fetch option chain snapshot
    url = f"https://api.polygon.io/v3/snapshot/options/{ticker}?apiKey={API_KEY}"
    response = requests.get(url)
    data = response.json()

    signals = []
    for option in data.get("results", []):
        try:
            if (
                option["details"]["option_type"] == "call"
                and option["greeks"]["delta"] >= 0.4 and option["greeks"]["delta"] <= 0.6
                and option["open_interest"] > 0
                and option["day"]["volume"] > option["open_interest"]
                and option["day"]["volume"] * option["last_quote"]["ask"] > 200000
            ):
                signals.append({
                    "ticker": ticker,
                    "strike": option["details"]["strike_price"],
                    "expiry": option["details"]["expiration_date"],
                    "entry": option["last_quote"]["ask"],
                    "volume": option["day"]["volume"],
                    "oi": option["open_interest"],
                    "delta": option["greeks"]["delta"],
                    "iv_rank": 21,  # Placeholder for now
                    "flow_score": 85,  # Basic score for valid signals
                    "type": "intraday",
                    "vwap_breakout": True  # Simulate breakout flag
                })
        except Exception:
            continue

    return pd.DataFrame(signals)